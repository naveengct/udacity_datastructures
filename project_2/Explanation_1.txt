Problem statement:
 To implement a Least Recently Used Cache.
 
Design Structure:
# first we are defining a doubly linked list class having value, left and right values and a dictionary.
# we store the key in the dictionary and value in the doubly linked list.
# In dictionary we store the node address as the key and key of catch as value.
# In put function the new node get inserted at the last and dictionary gets updated and if the limit exeeds
  the first value gets deleted(Least Recently Used).
# In get function the we move the node to front.

Time complexity:
 when we are creating the cache it takes O(1).
 ie.) Searching the node value in the dictionary takes O(1)
 
Space complexity:
  O(n) as we are having a dict and a list of nodes in LRU_Cache.
  Other than this we are using some extra Auxilary variables for calculation.

 
